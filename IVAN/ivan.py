import sys
from pathlib import Path
import datetime
import logging
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QListWidget, 
                               QTableWidget, QTableWidgetItem, QPushButton, QLineEdit, QLabel, QDialog, 
                               QMessageBox, QTabWidget, QCheckBox, QGroupBox, QFormLayout, QComboBox, 
                               QTextEdit, QSpacerItem, QSizePolicy, QGraphicsDropShadowEffect, QTextBrowser, QFileDialog)
from PySide6.QtGui import QFont, QTextCursor,  QIcon
from PySide6.QtCore import Qt, QSize, QTimer
from sqlalchemy import create_engine, Column, Integer, String, ForeignKey, Date
from sqlalchemy.orm import declarative_base, sessionmaker, relationship
from sqlalchemy.exc import SQLAlchemyError
import subprocess
import os
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.units import inch

# –ù–∞—ù—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—ù
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ù–∞—ù—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Base = declarative_base()
engine = create_engine('postgresql://acbs:1234@95.174.93.180:5432/magazin', echo=True)
Session = sessionmaker(bind=engine)
session = Session()

# –ú–æ–¥–µ–ª–∏ —Ç–∞–±–ª–∏—Ü
class Unit(Base):
    __tablename__ = 'units'
    id = Column(Integer, primary_key=True)
    unit_name = Column(String(50), nullable=False)

class ProductType(Base):
    __tablename__ = 'product_types'
    id = Column(Integer, primary_key=True)
    type_name = Column(String(50), nullable=False)

class DeliveryCondition(Base):
    __tablename__ = 'delivery_conditions'
    id = Column(Integer, primary_key=True)
    condition = Column(String(100), nullable=False)

class Supplier(Base):
    __tablename__ = 'suppliers'
    id = Column(Integer, primary_key=True)
    inn = Column(String(12), nullable=False)
    name = Column(String(100), nullable=False)
    phone = Column(String(20))

class Product(Base):
    __tablename__ = 'products'
    id = Column(Integer, primary_key=True)
    name = Column(String(100), nullable=False)
    unit_id = Column(Integer, ForeignKey('units.id', ondelete='SET NULL'))
    type_id = Column(Integer, ForeignKey('product_types.id', ondelete='SET NULL'))
    condition_id = Column(Integer, ForeignKey('delivery_conditions.id', ondelete='SET NULL'))
    unit = relationship("Unit")
    type = relationship("ProductType")
    condition = relationship("DeliveryCondition")

class Delivery(Base):
    __tablename__ = 'deliveries'
    id = Column(Integer, primary_key=True)
    supplier_id = Column(Integer, ForeignKey('suppliers.id', ondelete='SET NULL'))
    planned_date = Column(Date)
    actual_date = Column(Date)
    doc_number = Column(String(20))
    doc_date = Column(Date)
    supplier = relationship("Supplier")

class ProductInDelivery(Base):
    __tablename__ = 'products_in_deliveries'
    id = Column(Integer, primary_key=True)
    product_id = Column(Integer, ForeignKey('products.id', ondelete='CASCADE'))
    delivery_id = Column(Integer, ForeignKey('deliveries.id', ondelete='CASCADE'))
    planned_price = Column(Integer)
    planned_quantity = Column(Integer)
    actual_price = Column(Integer)
    actual_quantity = Column(Integer)
    product = relationship("Product")
    delivery = relationship("Delivery")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
try:
    # –°–Ω–∞—á–∞–ª–∞ —ù–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    Unit.__table__.create(engine, checkfirst=True)
    ProductType.__table__.create(engine, checkfirst=True)
    DeliveryCondition.__table__.create(engine, checkfirst=True)
    Supplier.__table__.create(engine, checkfirst=True)
    
    # –ó–∞—Ç–µ–º —ù–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —ù –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏
    Product.__table__.create(engine, checkfirst=True)
    Delivery.__table__.create(engine, checkfirst=True)
    ProductInDelivery.__table__.create(engine, checkfirst=True)
except SQLAlchemyError as e:
    logging.error(f"–û—à–∏–±–∫–∞ —ù–æ–∑–¥–∞–Ω–∏—ù —Ç–∞–±–ª–∏—Ü: {str(e)}")
    raise

# –û–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
class LoginWindow(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ù–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—ù - –£—á–µ—Ç –ø–æ—ù—Ç–∞–≤–æ–∫")
        self.setFixedSize(450, 350)
        self.setWindowIcon(QIcon("Logo.png"))
        self.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #FFFACD, stop:1 #FFD700);
                color: #333333;
                border-radius: 15px;
            }
            QLineEdit {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 12px;
                font-size: 16px;
            }
            QLineEdit:focus {
                border: 2px solid #FFD700;
            }
            QPushButton {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 12px;
                font-size: 16px;
            }
            QPushButton:hover {
                background-color: #FFD700;
            }
            QLabel {
                color: #333333;
                font-size: 24px;
                font-weight: bold;
            }
        """)
        
        layout = QVBoxLayout()
        layout.setSpacing(20)
        
        self.logo = QLabel("üå∏ –£—á–µ—Ç –ø–æ—ù—Ç–∞–≤–æ–∫")
        self.logo.setFont(QFont("Arial", 24, QFont.Bold))
        self.logo.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.logo)
        
        self.username_input = QLineEdit(self)
        self.username_input.setPlaceholderText("–õ–æ–≥–∏–Ω")
        self.username_input.setFixedHeight(50)
        layout.addWidget(self.username_input)
        
        self.password_input = QLineEdit(self)
        self.password_input.setPlaceholderText("–ü–∞—Ä–æ–ª—å")
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setFixedHeight(50)
        layout.addWidget(self.password_input)
        
        self.login_button = QPushButton("üîù –í–æ–π—Ç–∏")
        self.login_button.setFixedSize(150, 60)
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(10)
        shadow.setColor(Qt.gray)
        shadow.setOffset(3, 3)
        self.login_button.setGraphicsEffect(shadow)
        self.login_button.clicked.connect(self.check_login)
        layout.addWidget(self.login_button, alignment=Qt.AlignCenter)
        
        self.setLayout(layout)
    
    def check_login(self):
        users = {"1": {"password": "1", "role": "director"}, "seller": {"password": "Sell2025!", "role": "seller"}}
        username = self.username_input.text().strip().lower()
        password = self.password_input.text().strip()
        
        if not username or not password:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—ù—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—ù–µ –ø–æ–ª—ù")
            return
        
        if username in users and users[username]["password"] == password:
            self.role = users[username]["role"]
            self.accept()
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

# –û—ù–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—ù
class MainWindow(QMainWindow):
    def __init__(self, role):
        super().__init__()
        self.role = role
        self.permissions = {"director": {"view": True, "add": True, "edit": True, "delete": True}, "seller": {"view": True, "add": False, "edit": False, "delete": False}}
        self.setWindowTitle("–£—á–µ—Ç –ø–æ—ù—Ç–∞–≤–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ —Ü–≤–µ—Ç–æ–≤")
        self.resize(1500, 900)
        self.setWindowIcon(QIcon("Logo.png"))
        self.setStyleSheet("""
            QMainWindow {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #FFFFFF, stop:1 #F8F8F8);
                color: #333333;
            }
            QListWidget {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #FFFACD, stop:1 #FFD700);
                border: 1px solid #DAA520;
                border-radius: 10px;
                padding: 10px;
                font-size: 16px;
            }
            QTableWidget {
                background-color: #F9F9F9;
                border: 1px solid #DAA520;
                border-radius: 10px;
                padding: 10px;
                gridline-color: #DAA520;
            }
            QTableWidget::item {
                padding: 5px;
            }
            QHeaderView::section {
                background-color: #FFFFFF;
                color: #333333;
                font-weight: bold;
                border: 1px solid #DAA520;
                padding: 5px;
            }
            QPushButton {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #FFD700;
            }
            QPushButton:disabled {
                background-color: #E0E0E0;
                border: 2px solid #A9A9A9;
            }
            QLabel {
                font-weight: bold;
                font-size: 20px;
                color: #333333;
                padding: 10px;
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 5px;
            }
            QTabWidget::pane {
                border: 1px solid #DAA520;
                border-radius: 10px;
                background-color: #F9F9F9;
            }
            QTabBar::tab {
                background-color: #FFFFFF;
                border: 1px solid #DAA520;
                padding: 8px;
                border-top-left-radius: 10px;
                border-top-right-radius: 10px;
                font-size: 14px;
            }
            QTabBar::tab:selected {
                background-color: #F9F9F9;
            }
            QTextBrowser {
                background-color: #FFFFFF;
                border: 1px solid #DAA520;
                border-radius: 10px;
                padding: 10px;
                font-size: 14px;
            }
        """)
        
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        layout = QHBoxLayout(main_widget)
        layout.setSpacing(20)
        layout.setContentsMargins(15, 15, 15, 15)
        
        self.menu_list = QListWidget()
        self.menu_list.setFixedWidth(300)
        sections = ["–ü–æ—ù—Ç–∞–≤–∫–∏", "–ü–æ—ù—Ç–∞–≤—â–∏–∫–∏", "–¢–æ–≤–∞—Ä—ã", "–¢–æ–≤–∞—Ä—ã –≤ –ø–æ—ù—Ç–∞–≤–∫–µ", "–û—Ç—á–µ—Ç—ã —Ñ–∞–∫—Ç–∏—á–µ—ù–∫–∏—Ö –ø–æ—ù—Ç–∞–≤–æ–∫", "–û—Ç—á–µ—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ—ù—Ç–∞–≤–∫–µ", "–û—Ç—á–µ—Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö –ø–æ—ù—Ç–∞–≤–æ–∫"]
        self.menu_list.addItems(sections)
        self.menu_list.currentItemChanged.connect(self.display_section)
        layout.addWidget(self.menu_list)
        
        self.content_widget = QWidget()
        self.content_layout = QVBoxLayout(self.content_widget)
        self.content_layout.setSpacing(20)
        layout.addWidget(self.content_widget, stretch=1)
        
        self.toolbar = QHBoxLayout()
        self.toolbar.setSpacing(15)
        self.content_layout.addLayout(self.toolbar)
        
        self.exit_button = QPushButton("üö™ –í—ã—Ö–æ–¥")
        self.exit_button.setFixedSize(120, 40)
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(10)
        shadow.setColor(Qt.gray)
        shadow.setOffset(3, 3)
        self.exit_button.setGraphicsEffect(shadow)
        self.exit_button.clicked.connect(self.close_application)
        self.toolbar.addWidget(self.exit_button)
        
        self.notification_button = QPushButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—ù")
        self.notification_button.setFixedSize(150, 40)
        self.notification_button.setGraphicsEffect(shadow)
        self.notification_button.clicked.connect(self.show_notification)
        self.toolbar.addWidget(self.notification_button)
        
        self.settings_button = QPushButton("‚öô –ù–∞—ù—Ç—Ä–æ–π–∫–∏")
        self.settings_button.setFixedSize(150, 40)
        self.settings_button.setGraphicsEffect(shadow)
        self.settings_button.clicked.connect(self.open_settings)
        self.toolbar.addWidget(self.settings_button)
        
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.check_deliveries)
        self.timer.start(60000)
        
        self.header_label = QLabel("")
        self.content_layout.addWidget(self.header_label)
        
        self.table = QTableWidget()
        self.table.horizontalHeader().setVisible(True)
        self.content_layout.addWidget(self.table, stretch=1)
        
        self.preview_browser = QTextBrowser()
        self.preview_browser.hide()
        self.content_layout.addWidget(self.preview_browser)
        
        self.button_layout = QHBoxLayout()
        self.button_layout.setSpacing(15)
        self.add_button = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        self.add_button.setGraphicsEffect(shadow)
        self.edit_button = QPushButton("‚úù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.edit_button.setGraphicsEffect(shadow)
        self.delete_button = QPushButton("‚ùå –£–¥–∞–ª–∏—Ç—å")
        self.delete_button.setGraphicsEffect(shadow)
        self.preview_button = QPushButton("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
        self.preview_button.setGraphicsEffect(shadow)
        self.generate_button = QPushButton("üìÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PDF")
        self.generate_button.setGraphicsEffect(shadow)
        self.button_layout.addWidget(self.add_button)
        self.button_layout.addWidget(self.edit_button)
        self.button_layout.addWidget(self.delete_button)
        self.button_layout.addWidget(self.preview_button)
        self.button_layout.addWidget(self.generate_button)
        self.preview_button.hide()
        self.generate_button.hide()
        self.content_layout.addLayout(self.button_layout)
        
        self.content_layout.addSpacerItem(QSpacerItem(20, 20, QSizePolicy.Minimum, QSizePolicy.Expanding))
    
    def close_application(self):
        try:
            session.commit()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ —ù–µ—ù—ù–∏–∏: {str(e)}")
            session.rollback()
        finally:
            session.close()
            self.close()
    
    def check_deliveries(self):
        try:
            today = datetime.date.today()
            upcoming = session.query(Delivery).filter(
                Delivery.planned_date >= today,
                Delivery.planned_date <= today + datetime.timedelta(days=3)
            ).all()
            if upcoming:
                QMessageBox.information(self, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                    f"–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—ù—Ç–∞–≤–∫–∏: {', '.join(str(d.id) for d in upcoming)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ù—Ç–∞—Ç—É—ù!")
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—ù—Ç–∞–≤–æ–∫: {str(e)}")
            session.rollback()
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—ù—Ç–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ù–Ω–æ–≤–∞.")
    
    def show_notification(self):
        msg = QMessageBox(self)
        msg.setWindowTitle("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        msg.setStyleSheet("""
            QMessageBox {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #FFFFFF, stop:1 #F8F8F8);
                color: #333333;
                border: 1px solid #DAA520;
                border-radius: 10px;
            }
            QLabel {
                color: #333333;
                font-size: 14px;
                border-bottom: 2px solid #DAA520;
                padding-bottom: 5px;
            }
            QPushButton {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #FFD700;
            }
        """)
        msg.setText("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ö–∞–∂–¥—É—é –ø—ù—Ç–Ω–∏—Ü—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω—ù—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n\n–≠—Ç–æ –æ–±–µ—ù–ø–µ—á–∏—Ç –±–µ–∑–æ–ø–∞—ù–Ω–æ—ù—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–æ—ù—ù—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —ù–ª—É—á–∞–µ —ù–±–æ—ù.")
        msg.setStandardButtons(QMessageBox.Ok)
        msg.exec()
    
    def open_settings(self):
        settings_dialog = QDialog(self)
        settings_dialog.setWindowTitle("–ù–∞—ù—Ç—Ä–æ–π–∫–∏")
        settings_dialog.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #FFFFFF, stop:1 #F8F8F8);
                color: #333333;
                border-radius: 10px;
            }
            QTabWidget::pane {
                border: 1px solid #DAA520;
                background-color: #F9F9F9;
                border-radius: 10px;
            }
            QTabBar::tab {
                background-color: #FFFFFF;
                border: 1px solid #DAA520;
                padding: 8px;
                border-top-left-radius: 10px;
                border-top-right-radius: 10px;
                font-size: 14px;
            }
            QTabBar::tab:selected {
                background-color: #F9F9F9;
            }
            QPushButton {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #FFD700;
            }
            QLabel#separator {
                background: #DAA520;
                min-height: 2px;
                max-height: 2px;
                border: none;
            }
        """)
        settings_dialog.setFixedSize(500, 650)
        
        tabs = QTabWidget()
        account_tab = QWidget()
        about_tab = QWidget()
        
        account_layout = QVBoxLayout(account_tab)
        account_layout.setSpacing(20)
        
        separator = QLabel()
        separator.setObjectName("separator")
        account_layout.addWidget(separator)
        
        logout_button = QPushButton("üö™ –í—ã—Ö–æ–¥ –∏–∑ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—ù–∏")
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(10)
        shadow.setColor(Qt.gray)
        shadow.setOffset(3, 3)
        logout_button.setGraphicsEffect(shadow)
        logout_button.setFixedSize(250, 50)
        logout_button.clicked.connect(self.logout)
        account_layout.addWidget(logout_button, alignment=Qt.AlignCenter)
        
        change_password_button = QPushButton("üîí –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—ù")
        change_password_button.setGraphicsEffect(shadow)
        change_password_button.setFixedSize(250, 50)
        change_password_button.clicked.connect(self.change_password)
        account_layout.addWidget(change_password_button, alignment=Qt.AlignCenter)
        
        if self.role == "director":
            role_tab = QWidget()
            role_layout = QVBoxLayout(role_tab)
            role_layout.setSpacing(15)
            role_group = QGroupBox("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π –ø—Ä–æ–¥–∞–≤—Ü—É")
            role_form = QFormLayout()
            
            separator_role = QLabel()
            separator_role.setObjectName("separator")
            role_layout.addWidget(separator_role)
            
            self.user_select = QComboBox()
            self.user_select.addItems(["seller"])
            role_form.addRow("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—ù:", self.user_select)
            
            self.edit_permission = QCheckBox("–†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            self.add_permission = QCheckBox("–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
            self.delete_permission = QCheckBox("–†–∞–∑—Ä–µ—à–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ")
            self.view_permission = QCheckBox("–†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–æ—ù–º–æ—Ç—Ä")
            
            role_form.addRow(self.edit_permission)
            role_form.addRow(self.add_permission)
            role_form.addRow(self.delete_permission)
            role_form.addRow(self.view_permission)
            
            save_role_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∞–≤–∞")
            save_role_button.setGraphicsEffect(shadow)
            save_role_button.setFixedSize(200, 50)
            save_role_button.clicked.connect(self.save_permissions)
            role_form.addRow(save_role_button)
            
            role_group.setLayout(role_form)
            role_layout.addWidget(role_group)
            role_tab.setLayout(role_layout)
            tabs.addTab(role_tab, "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π")
            
            stats_tab = QWidget()
            stats_layout = QVBoxLayout(stats_tab)
            stats_layout.setSpacing(15)
            
            separator_stats = QLabel()
            separator_stats.setObjectName("separator")
            stats_layout.addWidget(separator_stats)
            
            stats_text = QTextEdit()
            stats_text.setReadOnly(True)
            try:
                total_deliveries = session.query(Delivery).count()
                total_products = session.query(Product).count()
                stats_text.setText(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—ù—Ç–≤–æ –ø–æ—ù—Ç–∞–≤–æ–∫: {total_deliveries}\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—ù—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
            except SQLAlchemyError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ù—Ç–∞—Ç–∏—ù—Ç–∏–∫–∏: {str(e)}")
                session.rollback()
                stats_text.setText("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ù—Ç–∞—Ç–∏—ù—Ç–∏–∫–∏")
            stats_layout.addWidget(stats_text)
            stats_tab.setLayout(stats_layout)
            tabs.addTab(stats_tab, "–°—Ç–∞—Ç–∏—ù—Ç–∏–∫–∞")
        
        about_layout = QVBoxLayout(about_tab)
        about_layout.setSpacing(15)
        
        separator_about = QLabel()
        separator_about.setObjectName("separator")
        about_layout.addWidget(separator_about)
        
        about_text = QTextEdit()
        about_text.setReadOnly(True)
        about_text.setText("–£—á–µ—Ç –ø–æ—ù—Ç–∞–≤–æ–∫ –≤ –º–∞–≥–∞–∑–∏–Ω–µ —Ü–≤–µ—Ç–æ–≤\n–í–µ—Ä—ù–∏—ù: 1.0\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: Ivan\n–î–∞—Ç–∞ –≤—ã–ø—É—ù–∫–∞: 05.05.2025")
        about_layout.addWidget(about_text)
        about_tab.setLayout(about_layout)
        
        account_tab.setLayout(account_layout)
        tabs.addTab(account_tab, "–£—á–µ—Ç–Ω–∞—ù –∑–∞–ø–∏—ù—å")
        tabs.addTab(about_tab, "–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        
        settings_dialog.setLayout(QVBoxLayout())
        settings_dialog.layout().addWidget(tabs)
        settings_dialog.exec()
    
    def save_permissions(self):
        self.permissions["seller"] = {
            "edit": self.edit_permission.isChecked(),
            "add": self.add_permission.isChecked(),
            "delete": self.delete_permission.isChecked(),
            "view": self.view_permission.isChecked()
        }
        QMessageBox.information(self, "–£—ù–ø–µ—Ö", f"–ü—Ä–∞–≤–∞ –¥–ª—ù –ø—Ä–æ–¥–∞–≤—Ü–∞ —ù–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {self.permissions['seller']}")
    
    def logout(self):
        try:
            session.commit()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ —ù–µ—ù—ù–∏–∏: {str(e)}")
            session.rollback()
        self.close()
        login = LoginWindow()
        if login.exec():
            self.role = login.role
            self.__init__(login.role)
            self.show()
    
    def change_password(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—ù")
        dialog.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #FFFFFF, stop:1 #F8F8F8);
                color: #333333;
                border-radius: 10px;
            }
            QLineEdit {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #FFD700;
            }
        """)
        layout = QVBoxLayout()
        layout.setSpacing(15)
        
        old_password_input = QLineEdit()
        old_password_input.setPlaceholderText("–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å")
        old_password_input.setEchoMode(QLineEdit.Password)
        layout.addWidget(old_password_input)
        
        new_password_input = QLineEdit()
        new_password_input.setPlaceholderText("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")
        new_password_input.setEchoMode(QLineEdit.Password)
        layout.addWidget(new_password_input)
        
        confirm_password_input = QLineEdit()
        confirm_password_input.setPlaceholderText("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")
        confirm_password_input.setEchoMode(QLineEdit.Password)
        layout.addWidget(confirm_password_input)
        
        save_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(10)
        shadow.setColor(Qt.gray)
        shadow.setOffset(3, 3)
        save_button.setGraphicsEffect(shadow)
        save_button.setFixedSize(200, 50)
        save_button.clicked.connect(lambda: self.update_password(
            old_password_input.text(), new_password_input.text(), confirm_password_input.text(), dialog))
        layout.addWidget(save_button, alignment=Qt.AlignCenter)
        
        dialog.setLayout(layout)
        dialog.exec()
    
    def update_password(self, old_pass, new_pass, confirm_pass, dialog):
        users = {"director": "Dir2025!", "seller": "Sell2025!"}
        username = self.role
        
        if not old_pass or not new_pass or not confirm_pass:
            QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–í—ù–µ –ø–æ–ª—ù –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            return
        
        if users[username] != old_pass:
            QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —ù—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å")
            return
        
        if new_pass != confirm_pass:
            QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —ù–æ–≤–ø–∞–¥–∞—é—Ç")
            return
        
        if len(new_pass) < 6:
            QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 6 —ù–∏–º–≤–æ–ª–æ–≤")
            return
        
        users[username] = new_pass
        QMessageBox.information(dialog, "–£—ù–ø–µ—Ö", "–ü–∞—Ä–æ–ª—å —É—ù–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
        dialog.accept()
    
    def display_section(self):
        section = self.menu_list.currentItem().text()
        self.table.clear()
        self.header_label.setText(section)
        self.preview_browser.hide()
        self.preview_button.hide()
        self.generate_button.hide()
        
        try:
            self.add_button.clicked.disconnect()
            self.edit_button.clicked.disconnect()
            self.delete_button.clicked.disconnect()
            self.preview_button.clicked.disconnect()
            self.generate_button.clicked.disconnect()
        except:
            pass
        
        if section == "–ü–æ—ù—Ç–∞–≤–∫–∏":
            self.show_deliveries()
            self.add_button.setEnabled(self.check_permission("add") and self.role == "director")
            self.edit_button.setEnabled(self.check_permission("edit") and self.role == "director")
            self.delete_button.setEnabled(self.check_permission("delete") and self.role == "director")
            if self.role == "director":
                self.add_button.clicked.connect(self.add_delivery)
                self.edit_button.clicked.connect(self.edit_delivery)
                self.delete_button.clicked.connect(self.delete_delivery)
        elif section == "–ü–æ—ù—Ç–∞–≤—â–∏–∫–∏":
            self.show_suppliers()
            self.add_button.setEnabled(self.check_permission("add") and self.role == "director")
            self.edit_button.setEnabled(self.check_permission("edit") and self.role == "director")
            self.delete_button.setEnabled(self.check_permission("delete") and self.role == "director")
            if self.role == "director":
                self.add_button.clicked.connect(self.add_supplier)
                self.edit_button.clicked.connect(self.edit_supplier)
                self.delete_button.clicked.connect(self.delete_supplier)
        elif section == "–¢–æ–≤–∞—Ä—ã":
            self.show_products()
            self.add_button.setEnabled(self.check_permission("add") and self.role == "director")
            self.edit_button.setEnabled(self.check_permission("edit") and self.role == "director")
            self.delete_button.setEnabled(self.check_permission("delete") and self.role == "director")
            if self.role == "director":
                self.add_button.clicked.connect(self.add_product)
                self.edit_button.clicked.connect(self.edit_product)
                self.delete_button.clicked.connect(self.delete_product)
        elif section == "–¢–æ–≤–∞—Ä—ã –≤ –ø–æ—ù—Ç–∞–≤–∫–µ":
            self.show_products_in_deliveries()
            self.add_button.setEnabled(self.check_permission("add"))
            self.edit_button.setEnabled(self.check_permission("edit"))
            self.delete_button.setEnabled(self.check_permission("delete"))
            self.add_button.clicked.connect(self.add_product_in_delivery)
            self.edit_button.clicked.connect(self.edit_product_in_delivery)
            self.delete_button.clicked.connect(self.delete_product_in_delivery)
        elif section in ["–û—Ç—á–µ—Ç—ã —Ñ–∞–∫—Ç–∏—á–µ—ù–∫–∏—Ö –ø–æ—ù—Ç–∞–≤–æ–∫", "–û—Ç—á–µ—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ—ù—Ç–∞–≤–∫–µ", "–û—Ç—á–µ—Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö –ø–æ—ù—Ç–∞–≤–æ–∫"]:
            if section == "–û—Ç—á–µ—Ç—ã —Ñ–∞–∫—Ç–∏—á–µ—ù–∫–∏—Ö –ø–æ—ù—Ç–∞–≤–æ–∫":
                self.show_actual_delivery_reports()
            elif section == "–û—Ç—á–µ—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ—ù—Ç–∞–≤–∫–µ":
                self.show_products_in_delivery_reports()
            else:
                self.show_planned_delivery_reports()
            self.add_button.setEnabled(False)
            self.edit_button.setEnabled(False)
            self.delete_button.setEnabled(False)
            self.preview_button.show()
            self.preview_button.clicked.connect(self.preview_report)
            self.generate_button.show()
            self.generate_button.clicked.connect(self.generate_pdf_report_current_section)
    
    def check_permission(self, action):
        return self.permissions[self.role][action]
    
    def show_deliveries(self):
        self.table.setColumnCount(5)
        self.table.setHorizontalHeaderLabels(["–ü–æ—ù—Ç–∞–≤—â–∏–∫", "–ü–ª–∞–Ω. –¥–∞—Ç–∞", "–§–∞–∫—Ç. –¥–∞—Ç–∞", "–ù–æ–º–µ—Ä –¥–æ–∫.", "–î–∞—Ç–∞ –¥–æ–∫."])
        try:
            deliveries = session.query(Delivery).all()
            self.table.setRowCount(len(deliveries))
            for i, delivery in enumerate(deliveries):
                self.table.setItem(i, 0, QTableWidgetItem(delivery.supplier.name if delivery.supplier else ""))
                self.table.setItem(i, 1, QTableWidgetItem(str(delivery.planned_date) if delivery.planned_date else ""))
                self.table.setItem(i, 2, QTableWidgetItem(str(delivery.actual_date) if delivery.actual_date else ""))
                self.table.setItem(i, 3, QTableWidgetItem(delivery.doc_number or ""))
                self.table.setItem(i, 4, QTableWidgetItem(str(delivery.doc_date) if delivery.doc_date else ""))
            self.table.resizeColumnsToContents()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—ù—Ç–∞–≤–æ–∫: {str(e)}")
            session.rollback()
            self.table.setRowCount(0)
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—ù—Ç–∞–≤–∫–∏")
    
    def show_suppliers(self):
        self.table.setColumnCount(3)
        self.table.setHorizontalHeaderLabels(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ò–ù–ù", "–¢–µ–ª–µ—Ñ–æ–Ω"])
        try:
            suppliers = session.query(Supplier).all()
            self.table.setRowCount(len(suppliers))
            for i, supplier in enumerate(suppliers):
                self.table.setItem(i, 0, QTableWidgetItem(supplier.name))
                self.table.setItem(i, 1, QTableWidgetItem(supplier.inn))
                self.table.setItem(i, 2, QTableWidgetItem(supplier.phone or ""))
            self.table.resizeColumnsToContents()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—ù—Ç–∞–≤—â–∏–∫–æ–≤: {str(e)}")
            session.rollback()
            self.table.setRowCount(0)
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—ù—Ç–∞–≤—â–∏–∫–æ–≤")
    
    def show_products(self):
        self.table.setColumnCount(4)
        self.table.setHorizontalHeaderLabels(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ï–¥. –∏–∑–º.", "–¢–∏–ø", "–£—ù–ª–æ–≤–∏–µ"])
        try:
            products = session.query(Product).all()
            self.table.setRowCount(len(products))
            for i, product in enumerate(products):
                self.table.setItem(i, 0, QTableWidgetItem(product.name))
                self.table.setItem(i, 1, QTableWidgetItem(product.unit.unit_name if product.unit else ""))
                self.table.setItem(i, 2, QTableWidgetItem(product.type.type_name if product.type else ""))
                self.table.setItem(i, 3, QTableWidgetItem(product.condition.condition if product.condition else ""))
            self.table.resizeColumnsToContents()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}")
            session.rollback()
            self.table.setRowCount(0)
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
    
    def show_products_in_deliveries(self):
        self.table.setColumnCount(6)
        self.table.setHorizontalHeaderLabels(["–¢–æ–≤–∞—Ä", "–ü–æ—ù—Ç–∞–≤–∫–∞", "–ü–ª–∞–Ω. —Ü–µ–Ω–∞", "–ü–ª–∞–Ω. –∫–æ–ª-–≤–æ", "–§–∞–∫—Ç. —Ü–µ–Ω–∞", "–§–∞–∫—Ç. –∫–æ–ª-–≤–æ"])
        try:
            items = session.query(ProductInDelivery).all()
            self.table.setRowCount(len(items))
            for i, item in enumerate(items):
                self.table.setItem(i, 0, QTableWidgetItem(item.product.name if item.product else ""))
                self.table.setItem(i, 1, QTableWidgetItem(str(item.delivery.id) if item.delivery else ""))
                self.table.setItem(i, 2, QTableWidgetItem(str(item.planned_price) if item.planned_price else ""))
                self.table.setItem(i, 3, QTableWidgetItem(str(item.planned_quantity) if item.planned_quantity else ""))
                self.table.setItem(i, 4, QTableWidgetItem(str(item.actual_price) if item.actual_price else ""))
                self.table.setItem(i, 5, QTableWidgetItem(str(item.actual_quantity) if item.actual_quantity else ""))
            self.table.resizeColumnsToContents()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ—ù—Ç–∞–≤–∫–∞—Ö: {str(e)}")
            session.rollback()
            self.table.setRowCount(0)
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –ø–æ—ù—Ç–∞–≤–∫–∞—Ö")
    
    def show_actual_delivery_reports(self):
        self.table.setColumnCount(2)
        self.table.setHorizontalHeaderLabels(["–§–∞–∫—Ç. –¥–∞—Ç–∞", "–ù–æ–º–µ—Ä –¥–æ–∫."])
        try:
            deliveries = session.query(Delivery).filter(Delivery.actual_date.isnot(None)).all()
            self.table.setRowCount(len(deliveries))
            for i, delivery in enumerate(deliveries):
                self.table.setItem(i, 0, QTableWidgetItem(str(delivery.actual_date)))
                self.table.setItem(i, 1, QTableWidgetItem(delivery.doc_number or ""))
            self.table.resizeColumnsToContents()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—ù–∫–∏–º –ø–æ—ù—Ç–∞–≤–∫–∞–º: {str(e)}")
            session.rollback()
            self.table.setRowCount(0)
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—ù–∫–∏–º –ø–æ—ù—Ç–∞–≤–∫–∞–º")
    
    def show_products_in_delivery_reports(self):
        self.table.setColumnCount(3)
        self.table.setHorizontalHeaderLabels(["–¢–æ–≤–∞—Ä", "–§–∞–∫—Ç. —Ü–µ–Ω–∞", "–§–∞–∫—Ç. –∫–æ–ª-–≤–æ"])
        try:
            items = session.query(ProductInDelivery).filter(ProductInDelivery.actual_quantity.isnot(None)).all()
            self.table.setRowCount(len(items))
            for i, item in enumerate(items):
                self.table.setItem(i, 0, QTableWidgetItem(item.product.name if item.product else ""))
                self.table.setItem(i, 1, QTableWidgetItem(str(item.actual_price) if item.actual_price else ""))
                self.table.setItem(i, 2, QTableWidgetItem(str(item.actual_quantity) if item.actual_quantity else ""))
            self.table.resizeColumnsToContents()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –≤ –ø–æ—ù—Ç–∞–≤–∫–∞—Ö: {str(e)}")
            session.rollback()
            self.table.setRowCount(0)
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º –≤ –ø–æ—ù—Ç–∞–≤–∫–∞—Ö")
    
    def show_planned_delivery_reports(self):
        self.table.setColumnCount(2)
        self.table.setHorizontalHeaderLabels(["–ü–ª–∞–Ω. –¥–∞—Ç–∞", "–ù–æ–º–µ—Ä –¥–æ–∫."])
        try:
            deliveries = session.query(Delivery).filter(Delivery.planned_date.isnot(None)).all()
            self.table.setRowCount(len(deliveries))
            for i, delivery in enumerate(deliveries):
                self.table.setItem(i, 0, QTableWidgetItem(str(delivery.planned_date)))
                self.table.setItem(i, 1, QTableWidgetItem(delivery.doc_number or ""))
            self.table.resizeColumnsToContents()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–º –ø–æ—ù—Ç–∞–≤–∫–∞–º: {str(e)}")
            session.rollback()
            self.table.setRowCount(0)
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–º –ø–æ—ù—Ç–∞–≤–∫–∞–º")
    
    def preview_report(self):
        section = str(self.menu_list.currentItem().text())
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
            project_root = Path(__file__).parent.parent  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—ù—ù, —á—Ç–æ —ù–∫—Ä–∏–ø—Ç –Ω–∞—Ö–æ–¥–∏—Ç—ù—ù –≤ –ø–æ–¥–ø–∞–ø–∫–µ
            temp_pdf = project_root / f"temp_preview_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S%f')}.pdf"
            self.generate_pdf_report(section, str(temp_pdf))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Path –≤ —ù—Ç—Ä–æ–∫—É
            html_content = self.pdf_to_html_preview(str(temp_pdf))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Path –≤ —ù—Ç—Ä–æ–∫—É
            self.preview_browser.setHtml(html_content)
            self.preview_browser.moveCursor(QTextCursor.Start)
            self.preview_browser.setVisible(True)
            self.preview_browser.raise_()
            try:
                if temp_pdf.exists():  # –ü—Ä–æ–≤–µ—Ä—ù–µ–º —ù—É—â–µ—ù—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    temp_pdf.unlink()  # –£–¥–∞–ª—ù–µ–º —Ñ–∞–π–ª
            except Exception as e:
                logging.warning(f'–ù–µ —É–¥–∞–ª–æ—ù—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}')
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—ù–º–æ—Ç—Ä–µ: {str(e)}")

    def pdf_to_html_preview(self, pdf_path):
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—ù—Ç–æ–π HTML-–ø—Ä–µ–¥–ø—Ä–æ—ù–º–æ—Ç—Ä –Ω–∞ –æ—ù–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
            section = self.menu_list.currentItem().text()
            html = """
            <html>
            <head>
                <style>
                    body { font-family: Arial, sans-serif; background-color: #F9F9F9; color: #333333; padding: 20px; }
                    .title-box { border: 2px solid #DAA520; border-radius: 10px; padding: 10px; background-color: #FFFACD; margin-bottom: 20px; text-align: center; }
                    h2 { margin: 0; color: #333333; }
                    table { border-collapse: collapse; width: 80%; margin: 20px auto; border-color: #DAA520; }
                    th { background-color: #FFFACD; padding: 8px; border: 1px solid #DAA520; text-align: center; }
                    td { padding: 8px; border: 1px solid #DAA520; text-align: center; }
                    .date { text-align: center; margin-top: 10px; }
                </style>
            </head>
            <body>
            """
            
            html += f"<div class='title-box'><h2>{section}</h2></div>"
            html += f"<p class='date'>–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—ù: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>"
            
            # –î–æ–±–∞–≤–ª—ù–µ–º —Ç–∞–±–ª–∏—Ü—É —ù –¥–∞–Ω–Ω—ã–º–∏
            html += "<table>"
            
            if section == "–û—Ç—á–µ—Ç—ã —Ñ–∞–∫—Ç–∏—á–µ—ù–∫–∏—Ö –ø–æ—ù—Ç–∞–≤–æ–∫":
                headers = ["–§–∞–∫—Ç. –¥–∞—Ç–∞", "–ù–æ–º–µ—Ä –¥–æ–∫."]
                data = session.query(Delivery).filter(Delivery.actual_date.isnot(None)).all()
            elif section == "–û—Ç—á–µ—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ—ù—Ç–∞–≤–∫–µ":
                headers = ["–¢–æ–≤–∞—Ä", "–§–∞–∫—Ç. —Ü–µ–Ω–∞", "–§–∞–∫—Ç. –∫–æ–ª-–≤–æ"]
                data = session.query(ProductInDelivery).filter(ProductInDelivery.actual_quantity.isnot(None)).all()
            else:  # –û—Ç—á–µ—Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö –ø–æ—ù—Ç–∞–≤–æ–∫
                headers = ["–ü–ª–∞–Ω. –¥–∞—Ç–∞", "–ù–æ–º–µ—Ä –¥–æ–∫."]
                data = session.query(Delivery).filter(Delivery.planned_date.isnot(None)).all()
            
            # –î–æ–±–∞–≤–ª—ù–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            html += "<tr>"
            for header in headers:
                html += f"<th>{header}</th>"
            html += "</tr>"
            
            # –î–æ–±–∞–≤–ª—ù–µ–º –¥–∞–Ω–Ω—ã–µ
            for item in data:
                html += "<tr>"
                if section == "–û—Ç—á–µ—Ç—ã —Ñ–∞–∫—Ç–∏—á–µ—ù–∫–∏—Ö –ø–æ—ù—Ç–∞–≤–æ–∫":
                    row_data = [str(item.actual_date) if item.actual_date else "", item.doc_number or ""]
                elif section == "–û—Ç—á–µ—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ—ù—Ç–∞–≤–∫–µ":
                    row_data = [
                        item.product.name if item.product else "",
                        str(item.actual_price) if item.actual_price else "",
                        str(item.actual_quantity) if item.actual_quantity else ""
                    ]
                else:
                    row_data = [str(item.planned_date) if item.planned_date else "", item.doc_number or ""]
                
                for cell in row_data:
                    html += f"<td>{cell}</td>"
                html += "</tr>"
            
            html += "</table></body></html>"
            return html
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ù–æ–∑–¥–∞–Ω–∏–∏ HTML-–ø—Ä–µ–¥–ø—Ä–æ—ù–º–æ—Ç—Ä–∞: {str(e)}")
            return f"<html><body><p>–û—à–∏–±–∫–∞ –ø—Ä–∏ —ù–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—ù–º–æ—Ç—Ä–∞: {str(e)}</p></body></html>"

    def generate_pdf_report(self, section, output_filename=None):
        try:
            section = str(section)  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —ù—Ç–æ —ù—Ç—Ä–æ–∫–∞
            if output_filename is None:
                # –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
                file_path, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –∫–∞–∫...", f"{section.replace(' ', '_')}.pdf", "PDF Files (*.pdf)")
                if not file_path:
                    return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
                output_filename = file_path
            
            # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
            doc = SimpleDocTemplate(
                output_filename,
                pagesize=A4,
                rightMargin=72,
                leftMargin=72,
                topMargin=72,
                bottomMargin=72
            )
            
            # –°—Ç–∏–ª–∏ –¥–ª—ù —Ç–µ–∫—ù—Ç–∞
            styles = getSampleStyleSheet()
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=16,
                spaceAfter=30,
                alignment=1  # center
            )
            
            # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            elements = []
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            elements.append(Paragraph(section, title_style))
            elements.append(Paragraph(
                f"–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—ù: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                styles["Normal"]
            ))
            elements.append(Spacer(1, 20))
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—ù —Ç–∞–±–ª–∏—Ü—ã
            if section == "–û—Ç—á–µ—Ç—ã —Ñ–∞–∫—Ç–∏—á–µ—ù–∫–∏—Ö –ø–æ—ù—Ç–∞–≤–æ–∫":
                headers = ["–§–∞–∫—Ç. –¥–∞—Ç–∞", "–ù–æ–º–µ—Ä –¥–æ–∫."]
                data = session.query(Delivery).filter(Delivery.actual_date.isnot(None)).all()
                table_data = [headers]
                for item in data:
                    table_data.append([
                        str(item.actual_date) if item.actual_date else "",
                        item.doc_number or ""
                    ])
            elif section == "–û—Ç—á–µ—Ç—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ—ù—Ç–∞–≤–∫–µ":
                headers = ["–¢–æ–≤–∞—Ä", "–§–∞–∫—Ç. —Ü–µ–Ω–∞", "–§–∞–∫—Ç. –∫–æ–ª-–≤–æ"]
                data = session.query(ProductInDelivery).filter(ProductInDelivery.actual_quantity.isnot(None)).all()
                table_data = [headers]
                for item in data:
                    table_data.append([
                        item.product.name if item.product else "",
                        str(item.actual_price) if item.actual_price else "",
                        str(item.actual_quantity) if item.actual_quantity else ""
                    ])
            else:  # –û—Ç—á–µ—Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö –ø–æ—ù—Ç–∞–≤–æ–∫
                headers = ["–ü–ª–∞–Ω. –¥–∞—Ç–∞", "–ù–æ–º–µ—Ä –¥–æ–∫."]
                data = session.query(Delivery).filter(Delivery.planned_date.isnot(None)).all()
                table_data = [headers]
                for item in data:
                    table_data.append([
                        str(item.planned_date) if item.planned_date else "",
                        item.doc_number or ""
                    ])
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            table = Table(table_data)
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightyellow),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 12),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
                ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 1, colors.gold),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ]))
            
            elements.append(table)
            
            # –°–æ–∑–¥–∞–µ–º PDF
            doc.build(elements)
            
            if output_filename != "temp_preview.pdf":
                QMessageBox.information(self, "–£—ù–ø–µ—Ö", f"–û—Ç—á–µ—Ç —ù–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {output_filename}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {str(e)}")
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—ù—å —ù–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF: {str(e)}")
    
    def generate_pdf_report_current_section(self):
        section = str(self.menu_list.currentItem().text())
        self.generate_pdf_report(section)
    
    def add_delivery(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –ø–æ—ù—Ç–∞–≤–∫—É")
        dialog.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #FFFFFF, stop:1 #F8F8F8);
                color: #333333;
                border-radius: 10px;
            }
            QLineEdit {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #FFD700;
            }
        """)
        layout = QVBoxLayout()
        layout.setSpacing(15)
        
        supplier_input = QLineEdit()
        supplier_input.setPlaceholderText("ID –ø–æ—ù—Ç–∞–≤—â–∏–∫–∞")
        layout.addWidget(supplier_input)
        
        planned_date_input = QLineEdit()
        planned_date_input.setPlaceholderText("–ü–ª–∞–Ω. –¥–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î)")
        layout.addWidget(planned_date_input)
        
        actual_date_input = QLineEdit()
        actual_date_input.setPlaceholderText("–§–∞–∫—Ç. –¥–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î)")
        layout.addWidget(actual_date_input)
        
        doc_number_input = QLineEdit()
        doc_number_input.setPlaceholderText("–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        layout.addWidget(doc_number_input)
        
        doc_date_input = QLineEdit()
        doc_date_input.setPlaceholderText("–î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î)")
        layout.addWidget(doc_date_input)
        
        add_button = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(10)
        shadow.setColor(Qt.gray)
        shadow.setOffset(3, 3)
        add_button.setGraphicsEffect(shadow)
        add_button.setFixedSize(150, 50)
        add_button.clicked.connect(lambda: self.save_delivery(
            supplier_input.text(), planned_date_input.text(), actual_date_input.text(),
            doc_number_input.text(), doc_date_input.text(), dialog))
        layout.addWidget(add_button, alignment=Qt.AlignCenter)
        
        dialog.setLayout(layout)
        dialog.exec()
    
    def save_delivery(self, supplier_id, planned_date, actual_date, doc_number, doc_date, dialog):
        try:
            if not supplier_id:
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "ID –ø–æ—ù—Ç–∞–≤—â–∏–∫–∞ –æ–±—ù–∑–∞—Ç–µ–ª–µ–Ω")
                return
            
            delivery = Delivery(
                supplier_id=int(supplier_id),
                planned_date=datetime.datetime.strptime(planned_date, "%Y-%m-%d").date() if planned_date else None,
                actual_date=datetime.datetime.strptime(actual_date, "%Y-%m-%d").date() if actual_date else None,
                doc_number=doc_number,
                doc_date=datetime.datetime.strptime(doc_date, "%Y-%m-%d").date() if doc_date else None
            )
            session.add(delivery)
            session.commit()
            dialog.accept()
            self.display_section()
        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            session.rollback()
            QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å —ù–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—ù—Ç–∞–≤–∫—É")
    
    def edit_delivery(self):
        selected = self.table.currentRow()
        if selected < 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—ù—Ç–∞–≤–∫—É –¥–ª—ù —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—ù")
            return
        
        delivery_id = int(self.table.item(selected, 0).text())
        dialog = QDialog(self)
        dialog.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—ù—Ç–∞–≤–∫—É")
        dialog.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #FFFFFF, stop:1 #F8F8F8);
                color: #333333;
                border-radius: 10px;
            }
            QLineEdit {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #FFD700;
            }
        """)
        layout = QVBoxLayout()
        layout.setSpacing(15)
        
        planned_date_input = QLineEdit()
        planned_date_input.setPlaceholderText("–ü–ª–∞–Ω. –¥–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î)")
        layout.addWidget(planned_date_input)
        
        actual_date_input = QLineEdit()
        actual_date_input.setPlaceholderText("–§–∞–∫—Ç. –¥–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î)")
        layout.addWidget(actual_date_input)
        
        doc_number_input = QLineEdit()
        doc_number_input.setPlaceholderText("–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        layout.addWidget(doc_number_input)
        
        save_button = QPushButton("‚úù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(10)
        shadow.setColor(Qt.gray)
        shadow.setOffset(3, 3)
        save_button.setGraphicsEffect(shadow)
        save_button.setFixedSize(150, 50)
        save_button.clicked.connect(lambda: self.update_delivery(
            delivery_id, planned_date_input.text(), actual_date_input.text(), doc_number_input.text(), dialog))
        layout.addWidget(save_button, alignment=Qt.AlignCenter)
        
        dialog.setLayout(layout)
        dialog.exec()
    
    def update_delivery(self, delivery_id, planned_date, actual_date, doc_number, dialog):
        try:
            delivery = session.query(Delivery).filter_by(id=delivery_id).first()
            if planned_date:
                delivery.planned_date = datetime.datetime.strptime(planned_date, "%Y-%m-%d").date()
            if actual_date:
                delivery.actual_date = datetime.datetime.strptime(actual_date, "%Y-%m-%d").date()
            if doc_number:
                delivery.doc_number = doc_number
            session.commit()
            dialog.accept()
            self.display_section()
        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            session.rollback()
            QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—ù—Ç–∞–≤–∫—É")
    
    def delete_delivery(self):
        selected = self.table.currentRow()
        if selected < 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—ù—Ç–∞–≤–∫—É –¥–ª—ù —É–¥–∞–ª–µ–Ω–∏—ù")
            return
        
        delivery_id = int(self.table.item(selected, 0).text())
        try:
            delivery = session.query(Delivery).filter_by(id=delivery_id).first()
            session.delete(delivery)
            session.commit()
            self.display_section()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—ù—Ç–∞–≤–∫–∏: {str(e)}")
            session.rollback()
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å —É–¥–∞–ª–∏—Ç—å –ø–æ—ù—Ç–∞–≤–∫—É")
    
    def add_supplier(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –ø–æ—ù—Ç–∞–≤—â–∏–∫–∞")
        dialog.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #FFFFFF, stop:1 #F8F8F8);
                color: #333333;
                border-radius: 10px;
            }
            QLineEdit {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #FFD700;
            }
        """)
        layout = QVBoxLayout()
        layout.setSpacing(15)
        
        name_input = QLineEdit()
        name_input.setPlaceholderText("–ù–∞–∑–≤–∞–Ω–∏–µ")
        layout.addWidget(name_input)
        
        inn_input = QLineEdit()
        inn_input.setPlaceholderText("–ò–ù–ù")
        layout.addWidget(inn_input)
        
        phone_input = QLineEdit()
        phone_input.setPlaceholderText("–¢–µ–ª–µ—Ñ–æ–Ω")
        layout.addWidget(phone_input)
        
        add_button = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(10)
        shadow.setColor(Qt.gray)
        shadow.setOffset(3, 3)
        add_button.setGraphicsEffect(shadow)
        add_button.setFixedSize(150, 50)
        add_button.clicked.connect(lambda: self.save_supplier(
            name_input.text(), inn_input.text(), phone_input.text(), dialog))
        layout.addWidget(add_button, alignment=Qt.AlignCenter)
        
        dialog.setLayout(layout)
        dialog.exec()
    
    def save_supplier(self, name, inn, phone, dialog):
        try:
            if not name or not inn:
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –ò–ù–ù –æ–±—ù–∑–∞—Ç–µ–ª—å–Ω—ã")
                return
            
            supplier = Supplier(name=name, inn=inn, phone=phone)
            session.add(supplier)
            session.commit()
            dialog.accept()
            self.display_section()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            session.rollback()
            QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å —ù–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—ù—Ç–∞–≤—â–∏–∫–∞")
    
    def edit_supplier(self):
        selected = self.table.currentRow()
        if selected < 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—ù—Ç–∞–≤—â–∏–∫–∞ –¥–ª—ù —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—ù")
            return
        
        supplier_id = int(self.table.item(selected, 0).text())
        dialog = QDialog(self)
        dialog.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—ù—Ç–∞–≤—â–∏–∫–∞")
        dialog.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #FFFFFF, stop:1 #F8F8F8);
                color: #333333;
                border-radius: 10px;
            }
            QLineEdit {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #FFD700;
            }
        """)
        layout = QVBoxLayout()
        layout.setSpacing(15)
        
        name_input = QLineEdit()
        name_input.setPlaceholderText("–ù–∞–∑–≤–∞–Ω–∏–µ")
        layout.addWidget(name_input)
        
        inn_input = QLineEdit()
        inn_input.setPlaceholderText("–ò–ù–ù")
        layout.addWidget(inn_input)
        
        phone_input = QLineEdit()
        phone_input.setPlaceholderText("–¢–µ–ª–µ—Ñ–æ–Ω")
        layout.addWidget(phone_input)
        
        save_button = QPushButton("‚úù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(10)
        shadow.setColor(Qt.gray)
        shadow.setOffset(3, 3)
        save_button.setGraphicsEffect(shadow)
        save_button.setFixedSize(150, 50)
        save_button.clicked.connect(lambda: self.update_supplier(
            supplier_id, name_input.text(), inn_input.text(), phone_input.text(), dialog))
        layout.addWidget(save_button, alignment=Qt.AlignCenter)
        
        dialog.setLayout(layout)
        dialog.exec()
    
    def update_supplier(self, supplier_id, name, inn, phone, dialog):
        try:
            supplier = session.query(Supplier).filter_by(id=supplier_id).first()
            if name:
                supplier.name = name
            if inn:
                supplier.inn = inn
            if phone:
                supplier.phone = phone
            session.commit()
            dialog.accept()
            self.display_section()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            session.rollback()
            QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—ù—Ç–∞–≤—â–∏–∫–∞")
    
    def delete_supplier(self):
        selected = self.table.currentRow()
        if selected < 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—ù—Ç–∞–≤—â–∏–∫–∞ –¥–ª—ù —É–¥–∞–ª–µ–Ω–∏—ù")
            return
        
        supplier_id = int(self.table.item(selected, 0).text())
        try:
            supplier = session.query(Supplier).filter_by(id=supplier_id).first()
            session.delete(supplier)
            session.commit()
            self.display_section()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—ù—Ç–∞–≤—â–∏–∫–∞: {str(e)}")
            session.rollback()
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å —É–¥–∞–ª–∏—Ç—å –ø–æ—ù—Ç–∞–≤—â–∏–∫–∞")
    
    def add_product(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
        dialog.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #FFFFFF, stop:1 #F8F8F8);
                color: #333333;
                border-radius: 10px;
            }
            QLineEdit, QComboBox {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #FFD700;
            }
        """)
        layout = QVBoxLayout()
        layout.setSpacing(15)
        
        name_input = QLineEdit()
        name_input.setPlaceholderText("–ù–∞–∑–≤–∞–Ω–∏–µ")
        layout.addWidget(name_input)
        
        unit_input = QComboBox()
        try:
            units = session.query(Unit).all()
            unit_input.addItems([unit.unit_name for unit in units])
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—ù: {str(e)}")
            session.rollback()
        layout.addWidget(unit_input)
        
        type_input = QComboBox()
        try:
            types = session.query(ProductType).all()
            type_input.addItems([ptype.type_name for ptype in types])
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}")
            session.rollback()
        layout.addWidget(type_input)
        
        condition_input = QComboBox()
        try:
            conditions = session.query(DeliveryCondition).all()
            condition_input.addItems([condition.condition for condition in conditions])
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—ù–ª–æ–≤–∏–π –ø–æ—ù—Ç–∞–≤–∫–∏: {str(e)}")
            session.rollback()
        layout.addWidget(condition_input)
        
        add_button = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(10)
        shadow.setColor(Qt.gray)
        shadow.setOffset(3, 3)
        add_button.setGraphicsEffect(shadow)
        add_button.setFixedSize(150, 50)
        add_button.clicked.connect(lambda: self.save_product(
            name_input.text(), unit_input.currentText(), type_input.currentText(), condition_input.currentText(), dialog))
        layout.addWidget(add_button, alignment=Qt.AlignCenter)
        
        dialog.setLayout(layout)
        dialog.exec()
    
    def save_product(self, name, unit_name, type_name, condition_name, dialog):
        try:
            if not name:
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ù–∑–∞—Ç–µ–ª—å–Ω–æ")
                return
            
            unit = session.query(Unit).filter_by(unit_name=unit_name).first()
            ptype = session.query(ProductType).filter_by(type_name=type_name).first()
            condition = session.query(DeliveryCondition).filter_by(condition=condition_name).first()
            
            product = Product(
                name=name,
                unit_id=unit.id if unit else None,
                type_id=ptype.id if ptype else None,
                condition_id=condition.id if condition else None
            )
            session.add(product)
            session.commit()
            dialog.accept()
            self.display_section()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            session.rollback()
            QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å —ù–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä")
    
    def edit_product(self):
        selected = self.table.currentRow()
        if selected < 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—ù —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—ù")
            return
        
        product_id = int(self.table.item(selected, 0).text())
        dialog = QDialog(self)
        dialog.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
        dialog.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #FFFFFF, stop:1 #F8F8F8);
                color: #333333;
                border-radius: 10px;
            }
            QLineEdit, QComboBox {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #FFD700;
            }
        """)
        layout = QVBoxLayout()
        layout.setSpacing(15)
        
        name_input = QLineEdit()
        name_input.setPlaceholderText("–ù–∞–∑–≤–∞–Ω–∏–µ")
        layout.addWidget(name_input)
        
        unit_input = QComboBox()
        try:
            units = session.query(Unit).all()
            unit_input.addItems([unit.unit_name for unit in units])
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—ù: {str(e)}")
            session.rollback()
        layout.addWidget(unit_input)
        
        type_input = QComboBox()
        try:
            types = session.query(ProductType).all()
            type_input.addItems([ptype.type_name for ptype in types])
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}")
            session.rollback()
        layout.addWidget(type_input)
        
        condition_input = QComboBox()
        try:
            conditions = session.query(DeliveryCondition).all()
            condition_input.addItems([condition.condition for condition in conditions])
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—ù–ª–æ–≤–∏–π –ø–æ—ù—Ç–∞–≤–∫–∏: {str(e)}")
            session.rollback()
        layout.addWidget(condition_input)
        
        save_button = QPushButton("‚úù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(10)
        shadow.setColor(Qt.gray)
        shadow.setOffset(3, 3)
        save_button.setGraphicsEffect(shadow)
        save_button.setFixedSize(150, 50)
        save_button.clicked.connect(lambda: self.update_product(
            product_id, name_input.text(), unit_input.currentText(), type_input.currentText(), condition_input.currentText(), dialog))
        layout.addWidget(save_button, alignment=Qt.AlignCenter)
        
        dialog.setLayout(layout)
        dialog.exec()
    
    def update_product(self, product_id, name, unit_name, type_name, condition_name, dialog):
        try:
            product = session.query(Product).filter_by(id=product_id).first()
            if name:
                product.name = name
            if unit_name:
                unit = session.query(Unit).filter_by(unit_name=unit_name).first()
                product.unit_id = unit.id if unit else None
            if type_name:
                ptype = session.query(ProductType).filter_by(type_name=type_name).first()
                product.type_id = ptype.id if ptype else None
            if condition_name:
                condition = session.query(DeliveryCondition).filter_by(condition=condition_name).first()
                product.condition_id = condition.id if condition else None
            session.commit()
            dialog.accept()
            self.display_section()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            session.rollback()
            QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    
    def delete_product(self):
        selected = self.table.currentRow()
        if selected < 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—ù —É–¥–∞–ª–µ–Ω–∏—ù")
            return
        
        product_id = int(self.table.item(selected, 0).text())
        try:
            product = session.query(Product).filter_by(id=product_id).first()
            session.delete(product)
            session.commit()
            self.display_section()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
            session.rollback()
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
    
    def add_product_in_delivery(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –ø–æ—ù—Ç–∞–≤–∫—É")
        dialog.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #FFFFFF, stop:1 #F8F8F8);
                color: #333333;
                border-radius: 10px;
            }
            QLineEdit {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #FFD700;
            }
        """)
        layout = QVBoxLayout()
        layout.setSpacing(15)
        
        product_input = QLineEdit()
        product_input.setPlaceholderText("ID —Ç–æ–≤–∞—Ä–∞")
        layout.addWidget(product_input)
        
        delivery_input = QLineEdit()
        delivery_input.setPlaceholderText("ID –ø–æ—ù—Ç–∞–≤–∫–∏")
        layout.addWidget(delivery_input)
        
        planned_price_input = QLineEdit()
        planned_price_input.setPlaceholderText("–ü–ª–∞–Ω. —Ü–µ–Ω–∞")
        layout.addWidget(planned_price_input)
        
        planned_quantity_input = QLineEdit()
        planned_quantity_input.setPlaceholderText("–ü–ª–∞–Ω. –∫–æ–ª-–≤–æ")
        layout.addWidget(planned_quantity_input)
        
        actual_price_input = QLineEdit()
        actual_price_input.setPlaceholderText("–§–∞–∫—Ç. —Ü–µ–Ω–∞")
        layout.addWidget(actual_price_input)
        
        actual_quantity_input = QLineEdit()
        actual_quantity_input.setPlaceholderText("–§–∞–∫—Ç. –∫–æ–ª-–≤–æ")
        layout.addWidget(actual_quantity_input)
        
        add_button = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(10)
        shadow.setColor(Qt.gray)
        shadow.setOffset(3, 3)
        add_button.setGraphicsEffect(shadow)
        add_button.setFixedSize(150, 50)
        add_button.clicked.connect(lambda: self.save_product_in_delivery(
            product_input.text(), delivery_input.text(), planned_price_input.text(),
            planned_quantity_input.text(), actual_price_input.text(), actual_quantity_input.text(), dialog))
        layout.addWidget(add_button, alignment=Qt.AlignCenter)
        
        dialog.setLayout(layout)
        dialog.exec()
    
    def save_product_in_delivery(self, product_id, delivery_id, planned_price, planned_quantity, 
                                actual_price, actual_quantity, dialog):
        try:
            if not product_id or not delivery_id:
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "ID —Ç–æ–≤–∞—Ä–∞ –∏ ID –ø–æ—ù—Ç–∞–≤–∫–∏ –æ–±—ù–∑–∞—Ç–µ–ª—å–Ω—ã")
                return
            
            item = ProductInDelivery(
                product_id=int(product_id),
                delivery_id=int(delivery_id),
                planned_price=int(planned_price) if planned_price else None,
                planned_quantity=int(planned_quantity) if planned_quantity else None,
                actual_price=int(actual_price) if actual_price else None,
                actual_quantity=int(actual_quantity) if actual_quantity else None
            )
            session.add(item)
            session.commit()
            dialog.accept()
            self.display_section()
        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            session.rollback()
            QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å —ù–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –ø–æ—ù—Ç–∞–≤–∫–µ")
    
    def edit_product_in_delivery(self):
        selected = self.table.currentRow()
        if selected < 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—ù—å –¥–ª—ù —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—ù")
            return
        
        item_id = int(self.table.item(selected, 0).text())
        dialog = QDialog(self)
        dialog.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ –ø–æ—ù—Ç–∞–≤–∫–µ")
        dialog.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #FFFFFF, stop:1 #F8F8F8);
                color: #333333;
                border-radius: 10px;
            }
            QLineEdit {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton {
                background-color: #FFFFFF;
                border: 2px solid #DAA520;
                border-radius: 15px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #FFD700;
            }
        """)
        layout = QVBoxLayout()
        layout.setSpacing(15)
        
        planned_price_input = QLineEdit()
        planned_price_input.setPlaceholderText("–ü–ª–∞–Ω. —Ü–µ–Ω–∞")
        layout.addWidget(planned_price_input)
        
        planned_quantity_input = QLineEdit()
        planned_quantity_input.setPlaceholderText("–ü–ª–∞–Ω. –∫–æ–ª-–≤–æ")
        layout.addWidget(planned_quantity_input)
        
        actual_price_input = QLineEdit()
        actual_price_input.setPlaceholderText("–§–∞–∫—Ç. —Ü–µ–Ω–∞")
        layout.addWidget(actual_price_input)
        
        actual_quantity_input = QLineEdit()
        actual_quantity_input.setPlaceholderText("–§–∞–∫—Ç. –∫–æ–ª-–≤–æ")
        layout.addWidget(actual_quantity_input)
        
        save_button = QPushButton("‚úù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(10)
        shadow.setColor(Qt.gray)
        shadow.setOffset(3, 3)
        save_button.setGraphicsEffect(shadow)
        save_button.setFixedSize(150, 50)
        save_button.clicked.connect(lambda: self.update_product_in_delivery(
            item_id, planned_price_input.text(), planned_quantity_input.text(),
            actual_price_input.text(), actual_quantity_input.text(), dialog))
        layout.addWidget(save_button, alignment=Qt.AlignCenter)
        
        dialog.setLayout(layout)
        dialog.exec()
    
    def update_product_in_delivery(self, item_id, planned_price, planned_quantity, 
                                  actual_price, actual_quantity, dialog):
        try:
            item = session.query(ProductInDelivery).filter_by(id=item_id).first()
            if planned_price:
                item.planned_price = int(planned_price)
            if planned_quantity:
                item.planned_quantity = int(planned_quantity)
            if actual_price:
                item.actual_price = int(actual_price)
            if actual_quantity:
                item.actual_quantity = int(actual_quantity)
            session.commit()
            dialog.accept()
            self.display_section()
        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            session.rollback()
            QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –ø–æ—ù—Ç–∞–≤–∫–µ")
    
    def delete_product_in_delivery(self):
        selected = self.table.currentRow()
        if selected < 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—ù—å –¥–ª—ù —É–¥–∞–ª–µ–Ω–∏—ù")
            return
        
        item_id = int(self.table.item(selected, 0).text())
        try:
            item = session.query(ProductInDelivery).filter_by(id=item_id).first()
            session.delete(item)
            session.commit()
            self.display_section()
        except SQLAlchemyError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ø–æ—ù—Ç–∞–≤–∫–∏: {str(e)}")
            session.rollback()
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—ù—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –ø–æ—ù—Ç–∞–≤–∫–∏")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    login = LoginWindow()
    if login.exec():
        role = login.role
        window = MainWindow(role)
        window.show()
    sys.exit(app.exec())